#!/usr/bin/env python 
# -*- coding:UTF-8 -*-
# 
"""
main
"""
import sys, pprint,os,json,time, copy,re,argparse,pickle,time
from PDDLParser import PDDLParser 
from Simulator import Simulator
from HigState import HigState
from LowState import LowState
from constants import DEBUG
from utils import *
from FondDomainAndOrGraph import FondDomainAndOrGraph
from PossVerfication import PossVerfication
from IGVerification import IGVerification
from utils import delete_all_files_in_dir_autogenerated

def main():
    """
    main function entry here.
    """
    generate_start_time = time.perf_counter()

    args_parser = argparse.ArgumentParser(description='code autoGenerator')
    args_parser.add_argument('-domainname', default = "bfs", help='Path to fond domain files(default=dfs). -- OPTIONAL')
    args_parser.add_argument('-cpn', default="5", help='number of classical plans,like \'3\' for \'*p1,*p2,*p3\'. -- NOT OPTIONAL')
    args_parser.add_argument('-deletehistory', default = 'True', help='delete history output files or not. -- OPTIONAL')
    args_parser.add_argument('-debug', default = 'True', help='print DEBUG message or not. -- OPTIONAL FOR TEST')
    args_parser.add_argument('-planner', default = 'PRP', help='PRP(fairness) or FONDASP(conditional fairness). -- OPTIONAL FOR TEST')
    params = vars(args_parser.parse_args())
    # timeout_number = params['timeout_number']

    if params['debug'] == 'False':
        DEBUG = False
    else:
        DEBUG = True
    domainname = params['domainname']
    planner_PRP_or_FONDASP = params['planner']
    deletehistory = params['deletehistory']
    delete_all_py_files_in_dir_autogenerated()
    if deletehistory == 'True':
        delete_all_files_in_dir_autogenerated()
    cpn = int(params['cpn']) # 1,2,...,cpn = range(1,cpn+1) 

    # ==========================================================
    # classical plan(CPs) domain_parser
    # ==========================================================
    dir2cp_d = os.getcwd()+"/domain/{0}/low_{0}_d.pddl".format(domainname)
    parser = PDDLParser()
    parser.parse_domain(dir2cp_d)

    # ==========================================================
    # classical plan(CPs) problems_parser
    # ==========================================================
    problems_list = []
    for cpi in range(1,cpn+1):
        dir2cpi = os.getcwd()+"/domain/{0}/low_{0}_p{1}.pddl".format(domainname,cpi)
        pi = parser.parse_problem(dir2cpi)
        problems_list.append(pi)

    # ==========================================================
    # classical plan(CPs) problems 
    # Breadth First Search from the initial state 
    # (every map('LL state')='HL state' ) for the high level action
    # simulation and get the final FOND Regex automata graph,the throw out Regex it recognized
    # ==========================================================

    fond_predicate_order = []
    for fond_predicate,_ in parser.fond_predicates.items():
        fond_predicate_order.append(fond_predicate) 
    whole_merged_all_sub_fond_domain_and_or_graph = FondDomainAndOrGraph(fond_predicate_order)

    for ll_problem in problems_list: 
        if DEBUG:
            print('='*30,ll_problem.problem_name,'\n')
        simulator = Simulator(parser)
        empty_sub_fond_graph = FondDomainAndOrGraph(fond_predicate_order)
        whole_merged_all_sub_fond_domain_and_or_graph,cur_sub_fond_graph = simulator.getsubHLactions(ll_problem,whole_merged_all_sub_fond_domain_and_or_graph,empty_sub_fond_graph)
        dumpFONDfiles(planner_PRP_or_FONDASP,os.getcwd(),cur_sub_fond_graph,ll_problem.problem_name,parser,'subFONDs')
        
        cache_sub_fond_path = "autogenerated/cache/{0}.bitefile".format(ll_problem.problem_name)
        with open(cache_sub_fond_path, 'wb') as f :
            pickle.dump(cur_sub_fond_graph, f)
            f.close() 

    # ==========================================================
    # generial plan: 
    # FOND model file and problem file write out.(policy) from `graphInTotal`
    # ==========================================================       
    if planner_PRP_or_FONDASP == 'PRP': 
        dumpFONDfiles(planner_PRP_or_FONDASP, os.getcwd(),whole_merged_all_sub_fond_domain_and_or_graph,domainname,parser)
    elif planner_PRP_or_FONDASP =='FONDASP':
        dumpFONDfiles(planner_PRP_or_FONDASP, os.getcwd(),whole_merged_all_sub_fond_domain_and_or_graph,domainname,parser)    
    whole_merged_all_sub_fond_domain_and_or_graph_path = "autogenerated/{0}.bitefile".format(domainname)
    with open(whole_merged_all_sub_fond_domain_and_or_graph_path, 'wb') as f :
        pickle.dump(whole_merged_all_sub_fond_domain_and_or_graph, f)
        f.close() 

    generate_end_time = time.perf_counter()
    print('it cost: ',generate_end_time - generate_start_time,'(s) to generate FOND abstraction.')

    # ==========================================================
    # verification poss(act) of FOND model: 
    # Implies(S_{pre},Poss(act)) 
    # ==========================================================        
    PossVerify_start_time = time.perf_counter()
    PossVerfication(parser,whole_merged_all_sub_fond_domain_and_or_graph)
    IGVerification(parser, domainname,whole_merged_all_sub_fond_domain_and_or_graph)
    # RUN all prove files
    run_all_python_prove_file_in_dir_autogenerated()
    PossVerify_end_time = time.perf_counter()
    print('it cost: ',PossVerify_end_time - PossVerify_start_time,'(s) to verification.')


if __name__ == '__main__':
    main()
