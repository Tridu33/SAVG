f0 = Implies(Not(qnext(vqhead,vqtail)),Exists([node,sucnode],And(curpoint2(node),qnext(vqhead,node),qnext(node,sucnode),inq(node),Not(qnext(vqhead,vqtail)),Not(vqtail==node)))) # \neg lenis0 ==> Poss(extract)
f1 = Implies(And( Not(qnext(vqhead,vqtail)),Not(Exists([node],(And(qnext(vqhead,node),qnext(node,vqtail)))))),Exists([node,sucnode],And(qnext(vqhead,sucnode),qnext(node,vqtail),Not(sucnode==node)))) # \neg lenis0 \land \neg lenis1 ==> length of queue > 1 ==> Exists([v1,v2],And(qnext(vqhead,v2),qnext(v1,vqtail),Not(v2==v1))))
f2 = Implies(Exists([node],(And(qnext(vqhead,node),qnext(node,vqtail)))),ForAll([node,l,r], And(qnext(vqhead,node),qnext(node,vqtail)))) # lenis1 \land curhasUnvisitedkids ==> Poss(pushkids2qOne)
constraint = And(f0,f1,f2)
