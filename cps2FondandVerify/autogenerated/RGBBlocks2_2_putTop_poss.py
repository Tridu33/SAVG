# -*- coding: UTF-8 -*-
#!/usr/bin/env python
#-------------------------------------------------------------------------------
# Name:        Automatic verification of $m(hs_\{pre\}) \impolies Poss(a_k)$ for FOND Abstraction.
# Author:      this file is autogenerated by "PossVerification.py/autogenerator_python_prove_file()"
# Created:     Wed Jul 23 17:04:52 2025
# Copyright:   (c) Tridu33 2022
# Licence:     <MIT licence>
#-------------------------------------------------------------------------------
from z3 import *
from func_timeout import func_set_timeout
import func_timeout,time,os


BlockType = DeclareSort("BlockType")
Bottom = Const('Bottom', BlockType)
x = Const('x', BlockType)
y = Const('y', BlockType)
v0 = Const('v0', BlockType)
v1 = Const('v1', BlockType)
v2 = Const('v2', BlockType)
v3 = Const('v3', BlockType)
v4 = Const('v4', BlockType)
v5 = Const('v5', BlockType)
v6 = Const('v6', BlockType)

# declare Predicates 
on_table = Function('on_table',BlockType,BoolSort())
clear = Function('clear',BlockType,BoolSort())
on = Function('on',BlockType,BlockType,BoolSort())
holding = Function('holding',BlockType,BoolSort())
isRed = Function('isRed',BlockType,BoolSort())
isGreen = Function('isGreen',BlockType,BoolSort())
isBlue = Function('isBlue',BlockType,BoolSort())
inRedBox = Function('inRedBox',BlockType,BoolSort())
inGreenBox = Function('inGreenBox',BlockType,BoolSort())
inBlueBox = Function('inBlueBox',BlockType,BoolSort())
arm_empty = Bool('arm_empty')
vStart = Bool('vStart')
VGoal = Bool('VGoal')
BlocksCleared = Bool('BlocksCleared')
HRed = Bool('HRed')
HGreen = Bool('HGreen')
HBlue = Bool('HBlue')

# load and exec domain constraint file of "RGBBlocks2" given by users(background information).
grader_father_src_path = os.path.abspath(os.path.dirname(__file__)+os.path.sep+"..")
for line in open('./constrainsConfig/RGBBlocks2_constrain.txt','r'): 
    exec(line)
@func_set_timeout(1000)
def myprove(f):
    s = Solver()
    s.add(Not(f))
    # print(s.sexpr())
    if s.check() == unsat:
        del s
        print(os.path.basename(__file__)[:-3]+" is proved.")
    else:
        print(os.path.basename(__file__)[:-3]+" failed to prove")
############################### start to prove! ####################################
hig = And(
    Not(clear(Bottom)),
    Not(Exists([x],(And(isRed(x),holding(x))))),
    Exists([x],(And(isGreen(x),holding(x)))),
    Not(Exists([x],(And(isBlue(x),holding(x))))))
low = Exists([v2,v3],And(holding(v2),clear(v3)))
goal = And(
    Implies(
        And(constraint,simplify(hig)),
        low
    )
)
try:
    # print(simplify(goal))
    myprove(goal)
except func_timeout.exceptions.FunctionTimedOut:
    print('timeout and unknown,please open \''+os.path.basename(__file__)+'\' and try.')
