#!/usr/bin/env python 
# -*- coding:UTF-8 -*-
import os
def copy_dir(src_path, target_path):
    if os.path.isdir(src_path) and os.path.isdir(target_path):
        filelist_src = os.listdir(src_path)
        for file in filelist_src:
            path = os.path.join(os.path.abspath(src_path), file)    
            if os.path.isdir(path):
                path1 = os.path.join(os.path.abspath(target_path), file)    
                if not os.path.exists(path1):                        
                    os.mkdir(path1)
                copy_dir(path,path1)            
            else:                                
                with open(path, 'rb') as read_stream:
                    contents = read_stream.read()
                    path1 = os.path.join(target_path, file)
                    with open(path1, 'wb') as write_stream:
                        write_stream.write(contents)
        return     True    
    else:
        return False    


def run_all_python_prove_file_in_dir_autogenerated():
    """run all python prove file in autogenerated path,like ./autogenerated/*.py"""
    copy_dir("constrainsConfig",".\\autogenerated\\constrainsConfig")
    # print("start to prove all theorem:\n")
    cur_path = os.path.dirname(os.path.realpath(__file__))
    os.putenv("PYTHONPATH", cur_path)
    case_path = os.path.join(cur_path, "autogenerated")
    lst = os.listdir(case_path)
    # print(lst)
    count_process_number = 0
    total_prove_files_count = 0
    for each in lst:
        if os.path.splitext(each)[1] == '.py':
            total_prove_files_count = total_prove_files_count + 1
    total_prove_files_count = total_prove_files_count - 1
    for c in lst:
        curr_ps = count_process_number/total_prove_files_count
        progress_width = 28
        progress_str = '{0:s}'.format(int(progress_width * curr_ps) * '>').ljust(progress_width, '-')
        # progress_str = '{0:s}'.format(int(progress_width * curr_ps) * '|~_~)').ljust(progress_width, ' ')
        msg_str = '{0:.0%}:'.format(curr_ps)
        
        if os.path.splitext(c)[1] == '.py':
            print(f'\r{progress_str} {msg_str}')#, end='')
            count_process_number += 1
            #print('py .\\autogenerated\\{0}'.format(c))
            #os.system('py .\\autogenerated\\{0}'.format(c))
            os.system('python {1}'.format(case_path,os.path.join(case_path, c)))

def delete_all_files_in_dir_autogenerated():
    cur_path = os.path.dirname(os.path.realpath(__file__))
    path = os.path.join(cur_path, "autogenerated")
    for maindir,subdir,file_name_list in os.walk(path):  
        for filename in file_name_list:  
            if(filename.endswith(".py") or filename.endswith(".json") or filename.endswith(".png") or filename.endswith(".txt")):  
                os.remove(maindir+"/"+filename)  
            else: 
                pass
    # print("all ./autogenerated/*.py have been deleted.")
    
def delFilesPRPGenerated():
    """
    delete Files by PRP Generated as follow:
    """
    cur_path = os.path.dirname(os.path.realpath(__file__))
    os.remove(cur_path + "/" + "plan_numbers_and_cost")
    os.remove(cur_path + "/" + "output.sas")
    os.remove(cur_path + "/" + "output")
    os.remove(cur_path + "/" + "policy.fsap")
    os.remove(cur_path + "/" + "sas_plan")
    os.remove(cur_path + "/" + "policy.out")
    os.remove(cur_path + "/" + "elapsed.time")
    os.remove(cur_path + "/" + "human_policy.out")

if __name__ == '__main__':
    delFilesPRPGenerated()









































































